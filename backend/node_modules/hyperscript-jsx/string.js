'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = h;

var _util = require('./util');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var selfClosing = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

function h(tag, attrs) {
  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  if (typeof tag === 'function') {
    if (tag.prototype && tag.prototype.constructor && tag.prototype.render) {
      // eslint-disable-next-line new-cap
      var instance = new tag(Object.assign({}, attrs, { children: children }));
      return instance.render(instance.props, instance.state) || '';
    }

    return tag(Object.assign({}, attrs, { children: children }));
  }

  if (typeof tag !== 'string') {
    // so that we can use h() to convert html string
    // into node like <div>{h(props.region)}</div>
    return null;
  }

  var str = '<' + tag;

  if (attrs) {
    Object.keys(attrs).forEach(function (key) {
      var value = attrs[key];

      if (value != null && !(value instanceof Function)) {
        if (key === 'className') key = 'class';

        if (key === 'class') {
          if (Array.isArray(value)) {
            value = value.filter(function (value) {
              return value;
            }).join(' ');
          } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
            value = (0, _util.hashToClassName)(value);
          }
        }

        str += ' ' + key + '="' + value + '"';
      }
    });
  }

  if (selfClosing.includes(tag)) {
    str += '/>';
    return str;
  }

  str += '>';

  while (children.length) {
    var child = children.shift();

    if (Array.isArray(child)) {
      children.unshift.apply(children, _toConsumableArray(child));
    } else if (child != null && child !== false) {
      str += child;
    }
  }

  return str + '</' + tag + '>';
}
module.exports = exports['default'];