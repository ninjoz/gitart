"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fragment = void 0;
const add_px_to_style_1 = __importDefault(require("add-px-to-style"));
exports.Fragment = Symbol("jsx.Fragment");
function jsx(nodeName, attributes, ...args) {
    const children = args.length ? [].concat(...args) : null;
    return { nodeName, attributes, children };
}
function css(style) {
    return Object.entries(style)
        .reduce((styleString, [key, value]) => {
        const name = key.replace(/([A-Z])/g, ([match]) => `-${match.toLowerCase()}`);
        return `${styleString} ${name}: ${(0, add_px_to_style_1.default)(name, value)};`;
    }, "")
        .trim();
}
function buildAttributes(attributes) {
    let htmlAtt = '';
    Object.entries(attributes).forEach(([key, value]) => {
        if (key === "style" && typeof value === "object") {
            htmlAtt += ` ${key}="${css(value)}"`;
        }
        else if (key === "children") {
            Object.assign(attributes, { children: value });
        }
        else if (key === "className") {
            htmlAtt += ` class="${value}"`;
        }
        else {
            htmlAtt += ` ${key}="${value}"`;
        }
    });
    return htmlAtt;
}
jsx.render = function render(node) {
    var _a;
    if (!node)
        return '';
    if (!node.nodeName)
        return node;
    // if (typeof node === "string") return node
    if (typeof node.nodeName === "function") {
        return render(node.nodeName({
            ...node.attributes,
            children: ((_a = node === null || node === void 0 ? void 0 : node.attributes) === null || _a === void 0 ? void 0 : _a.children) || (node === null || node === void 0 ? void 0 : node.children)
        }));
    }
    if (node.nodeName === exports.Fragment)
        return (node.children || []).map((child) => render(child)).join('');
    const attributes = node.attributes || {};
    let tree = `<${node.nodeName}${buildAttributes(attributes)}>`;
    if ([
        "area",
        "base",
        "col",
        "embed",
        "link",
        "track",
        "wbr",
        "param",
        "source",
        "img",
        "input",
        "br",
        "hr",
        "meta",
    ].includes(node.nodeName))
        return tree;
    tree += ((attributes === null || attributes === void 0 ? void 0 : attributes.children) || node.children || [])
        .map((child) => render(child))
        .join('');
    tree += `</${node.nodeName}>`;
    return tree;
};
exports.default = jsx;
module.exports = jsx;
module.exports.Fragment = exports.Fragment;
